# Multi-stage build for optimized analytics service
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    libpq-dev \
    pkg-config \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Install additional analytics dependencies
RUN pip install --no-cache-dir \
    psycopg2-binary==2.9.9 \
    sqlalchemy==2.0.23 \
    pandas==2.1.4 \
    numpy==1.25.2 \
    scipy==1.11.4 \
    scikit-learn==1.3.2 \
    redis==5.0.1 \
    celery==5.3.4 \
    websockets==12.0 \
    fastapi==0.104.1 \
    uvicorn==0.24.0 \
    prometheus-client==0.19.0 \
    cryptography==41.0.7 \
    pyopenssl==23.3.0

# Production stage
FROM python:3.11-slim as production

# Set build arguments for labels
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Set metadata labels
LABEL maintainer="Portfolio Rebalancer Analytics Team" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="portfolio-rebalancer-analytics" \
      org.label-schema.description="Advanced analytics service for portfolio performance analysis and backtesting" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/your-org/portfolio-rebalancer" \
      org.label-schema.vendor="Portfolio Rebalancer" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"

# Install runtime dependencies and security tools
RUN apt-get update && apt-get install -y \
    curl \
    libpq5 \
    ca-certificates \
    openssl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Create non-root user for security
RUN groupadd -r analytics && useradd -r -g analytics -u 1001 analytics

# Set working directory
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY src/ ./src/
COPY setup.py .

# Install the package in development mode
RUN pip install -e .

# Create necessary directories and set permissions including yfinance cache
RUN mkdir -p data logs cache/yfinance .credentials .keys ssl && \
    chown -R analytics:analytics /app && \
    chmod -R 755 /app && \
    chmod 700 /app/.credentials /app/.keys /app/ssl

# Generate self-signed certificate for development (replace with real certs in production)
RUN openssl req -x509 -newkey rsa:4096 -keyout /app/ssl/key.pem -out /app/ssl/cert.pem \
    -days 365 -nodes -subj "/C=US/ST=State/L=City/O=Organization/CN=analytics-service" && \
    chown -R analytics:analytics /app/ssl && \
    chmod 600 /app/ssl/key.pem && \
    chmod 644 /app/ssl/cert.pem

# Switch to non-root user
USER analytics

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV YFINANCE_CACHE_DIR=/app/cache/yfinance
ENV ANALYTICS_SERVICE_PORT=8084
ENV WEBSOCKET_PORT=8085
ENV SSL_CERT_PATH=/app/ssl/cert.pem
ENV SSL_KEY_PATH=/app/ssl/key.pem

# Security environment variables
ENV ANALYTICS_SECURE_COOKIES=true
ENV ANALYTICS_CSRF_PROTECTION=true
ENV ANALYTICS_RATE_LIMITING=true
ENV ANALYTICS_REQUEST_TIMEOUT=300
ENV ANALYTICS_MAX_REQUEST_SIZE=10485760

# Expose ports
EXPOSE 8084 8085

# Enhanced health check with SSL support
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f -k https://localhost:8084/health || curl -f http://localhost:8084/health || exit 1

# Security labels for container scanning
LABEL security.scan="enabled"
LABEL security.non-root="true"
LABEL security.readonly-rootfs="false"
LABEL readiness.probe.path="/ready"
LABEL readiness.probe.port="8084"

# Default command
CMD ["python", "-m", "src.portfolio_rebalancer.services.analytics_service", "--mode", "server", "--host", "0.0.0.0", "--port", "8084"]

# Development stage
FROM production as development

# Switch back to root for development tools
USER root

# Install development dependencies
RUN pip install --no-cache-dir \
    pytest==7.4.3 \
    pytest-cov==4.1.0 \
    pytest-asyncio==0.21.1 \
    black==23.11.0 \
    flake8==6.1.0 \
    mypy==1.7.1 \
    jupyter==1.0.0

# Install additional development tools
RUN apt-get update && apt-get install -y \
    git \
    vim \
    htop \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Switch back to analytics user
USER analytics

# Override command for development
CMD ["python", "-c", "print('Analytics development container ready. Use docker exec to run commands.')"]
